<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Databases Management</title>
    <!-- Include Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

    <style>


        /* Set fixed height and make tbody scrollable */
        .container {
            max-height: 750px; /* Set the maximum height for the table */
            overflow-y: auto; /* Enable vertical scrollbar */
        }
  
        /* CSS styles for the table */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <%- include('./partiales/select') %> 

    <div class="container">
        <h2>Data Table</h2>
        <div class="table-responsive">
          <!--   <button class="btn btn-success" onclick="addRow()"><i class="fas fa-plus"></i> Add Row</button> -->
            <table id="dynamicTable" class="table table-bordered">
                <thead id="tableHeaders"></thead>
                <tbody id="dynamicTableBody"></tbody>
            </table>
          
        </div>
    </div>


          <!-- Modal for confirming deletion -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="deleteModalBody">
                Are you sure you want to delete this row?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDelete" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>



       <!-- Modal for editing row -->
       <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Edit Row</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Form fields for editing -->
                    <div id="editFormFields"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveChanges()">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Include jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <!-- Include Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>

        let rowToEdit;
         let TableName;
        // Function to handle the selected value from dropdown
        function getSelectedValue() {
            var selectedValue = document.getElementById("menus").value;
              TableName=selectedValue;
            sendDataToServer(selectedValue);
            
        }
let data=[]
        // Function to send data to the server
        function sendDataToServer(value) {
            $.ajax({
                type: "POST",
                url: "/getDataFromTable", // Correct endpoint URL
                data: { selectedValue: value },
                success: function(response) {
                    console.log("Data received successfully!");
                    data=response;
                    renderTable(response);
                },
                error: function(xhr, status, error) {
                    console.error("Error occurred while sending data: " + error);
                }
            });
        }
       
        // Function to render the table with the received data
        function renderTable(data) {
            let tableHeaders = document.querySelector('#tableHeaders');
            let tableBody = document.querySelector('#dynamicTableBody');
            // Clear existing table rows and headers
            tableBody.innerHTML = '';
            tableHeaders.innerHTML = '';
            // Create header row
            let headerRow = document.createElement('tr');
            // Iterate over object keys to create header cells
            for (let key in data[0]) {
                if (data[0].hasOwnProperty(key)) {
                    let headerCell = document.createElement('th');
                    headerCell.textContent = key;
                    headerRow.appendChild(headerCell);
                }
            }
            // Append the header row to the table headers
            tableHeaders.appendChild(headerRow);
            // Iterate over array of objects and generate table rows
            data.forEach(obj => {
                let row = document.createElement('tr');
                // Iterate over object properties and create table cells dynamically
                for (let key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        let cell = document.createElement('td');
                        cell.textContent = obj[key];
                        row.appendChild(cell);
                    }
                }
                // Add buttons for CRUD operations
                let actionCell = document.createElement('td');
                let editButton = document.createElement('button');
                editButton.innerHTML = '<i class="fas fa-edit"></i> Edit';
                editButton.className = 'btn btn-primary btn-sm';
                editButton.onclick = function() {
                    editRow(obj);
                };
                actionCell.appendChild(editButton);
                
                let deleteButton = document.createElement('button');
                deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i> Delete';
                deleteButton.className = 'btn btn-danger btn-sm';
                deleteButton.onclick = function() {
                    deleteRow(row);
                };
                actionCell.appendChild(deleteButton);

                row.appendChild(actionCell);

                // Append the row to the table body
                tableBody.appendChild(row);
            });
        }

        // Function to handle editing a row
        function editRow(rowData) {
            rowToEdit = rowData;
            // Populate the modal with data for editing
            let editFormFields = document.getElementById('editFormFields');
            editFormFields.innerHTML = ''; // Clear previous content
            for (let key in rowData) {
                if (rowData.hasOwnProperty(key)) {
                    let inputGroup = document.createElement('div');
                    inputGroup.className = 'mb-3';
                    inputGroup.innerHTML = `
                        <label class="form-label">${key}</label>
                        <input type="text" class="form-control" value="${rowData[key]}" id="${key}">
                    `;
                    editFormFields.appendChild(inputGroup);
                }
            }
            $('#editModal').modal('show'); // Show the modal
        }

      

        // Function to save changes made in the modal
/* function saveChanges() {
    // Get the edited values from the modal
    let editedData = {};
    for (let key in rowToEdit) {
        if (rowToEdit.hasOwnProperty(key)) {
            editedData[key] = document.getElementById(key).value;
        }
    }
    
    // Log the edited data in the console
    console.log('Edited data:', editedData);
    
    $('#editModal').modal('hide'); // Hide the modal
}
 */

 function saveChanges() {
    // Get the edited values from the modal
    let editedData = {};
    for (let key in rowToEdit) {
        if (rowToEdit.hasOwnProperty(key)) {
            editedData[key] = document.getElementById(key).value;
        }
    }
    
    // Log the edited data in the console
    console.log('Edited data:', editedData);

    // Log TableName separately
    console.log('TableName:', TableName);

    // Send the edited data and TableName separately to the server
    fetch('/saveChanges', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            editedData: editedData,
            TableName: TableName
        })
    })
    .then(response => {
        if (response.ok) {
            console.log('Data sent successfully');
        } else {
            console.error('Failed to send data:', response.statusText);
        }
    })
    .catch(error => {
        console.error('Error sending data:', error);
    });
    
    $('#editModal').modal('hide'); // Hide the modal
}


// Function to handle deleting a row
function deleteRow(row) {
    // Extract data from the selected row
    let rowData = {};
    $(row).find('td').each(function(index, cell) {
        let columnName = $('#tableHeaders th').eq(index).text();
        rowData[columnName] = $(cell).text();
    });

    // Populate the modal with data for confirmation
    let modalBody = document.getElementById('deleteModalBody');
    modalBody.innerHTML = ''; // Clear previous content
    for (let key in rowData) {
        if (rowData.hasOwnProperty(key)) {
            let rowInfo = document.createElement('p');
            rowInfo.textContent = `${key}: ${rowData[key]}`;
            modalBody.appendChild(rowInfo);
        }
    }

    // Show the modal
    $('#deleteModal').modal('show');

    // Set up event listener for delete button in the modal
    $('#confirmDelete').on('click', function() {
        // Log the information of the selected row to the console
        console.log('Row to delete:', rowData);
        console.log('TableName:', TableName);
        // You can perform actual deletion here if needed
        deleteRowFromDatabase(rowData);
        $('#deleteModal').modal('hide'); // Hide the modal
    });
}
         
function deleteRowFromDatabase(rowData) {
    // Send the delete request to the server
    fetch('/deleteRow', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ rowData: rowData, TableName: TableName }) // Correct syntax to pass rowData and TableName as a single object
    })
    .then(response => {
        if (response.ok) {
            console.log('Row deleted successfully');
        } else {
            console.error('Failed to delete row:', response.statusText);
        }
    })
    .catch(error => {
        console.error('Error deleting row:', error);
    });
}


        // Function to add a new row to the table
        function addRow() {
             
        }


       
    
    </script>
</body>
</html>
